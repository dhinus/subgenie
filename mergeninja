#!/bin/bash

safeExec()
{
  cmd="$1"
  echo -e "\nCMD: $cmd"
  echo "Press ENTER to execute this command or CTRL-C to quit"
  read
  eval $cmd
}

mergeOne()
{
  echo -e "\nEnter a revision number:"
  read rev
  pristineCheck 
  merge_command="svn merge -c$rev $THE_TRUNK"
  safeExec "$merge_command"
  commit_command="svn commit -m 'Mergeninja merged revision $rev from trunk'"
  safeExec "$commit_command"
}

mergeRange()
{
  echo -e "\nEnter the FIRST revision to merge:"
  read rev1
  echo -e "\nEnter the LAST revision to merge:"
  read rev2
  pristineCheck
  let "rev1 -= 1" #SVN range syntax wants the previous rev
  merge_command="svn merge -r$rev1:$rev2 $THE_TRUNK"
  safeExec "$merge_command"
  commit_command="svn commit -m 'Mergeninja merged range $rev1:$rev2 from trunk'"
  safeExec "$commit_command"
}

mergeAll()
{
  pristineCheck 
  merge_command="svn merge $THE_TRUNK"
  safeExec "$merge_command"
  commit_command="svn commit -m 'Mergeninja merged all revisions from trunk'"
  safeExec "$commit_command"
}

pristineCheck()
{
  PRISTINE=$(svn status | grep ^[AMCDG])
  if [[ -n $PRISTINE ]]; then
    echo -e "\nOUCH! The working copy has local modifications!"
    echo -e "What about a nice svn revert -R .? ;)"
    echo
    echo "Y. Yes, please. Trash 'em all!"
    echo "N. No, thanks. I want to review them."
    while true; do
      read -s -n1 key
      key=$(echo $key |tr a-z A-Z)
      case "$key" in
        Y)
          echo -e "\nReverting the working copy to BASE.\n"
          svn revert -R .
          break
          ;;
        N)
          echo -e "\nSee you later, then.\n"
          exit 0
          ;;
      esac
    done
  fi
}

MAGIC="|sed '/^-*$/d' |sed 's/..:.*lines*//' | tr \"\n\" ' ' |sed 's/^\(.\{100\}\).*/\1/' "

echo
echo '\m/ MERGE NINJA \m/'
echo '==================='

if [ ! -d '.svn' ]; then
  echo -e "Nice try, but current dir is not a working copy.\n"
  exit 1
fi

THIS_BRANCH=$(svn info |grep URL |sed 's|^.*\(svn.*\)|\1|')
THE_TRUNK=$(echo $THIS_BRANCH |sed 's|^\(svn.*\)/branches/.*|\1/trunk|')

if [ $THIS_BRANCH == $THE_TRUNK ]; then
  echo -e "Nice try, but you cannot merge the trunk with itself.\n"
  exit 2
fi

if [[ -n $(echo $THIS_BRANCH |grep -e '^.*\(svn.*\)/branches/.*/' ) ]]; then
  echo "Nice try, but this tool won't allow you to merge a subdirectory."
  echo -e "You must merge a whole branch, or nothing. Sorry, mate.\n"
  exit 3
fi

pristineCheck

echo -e "\nLet's make sure the working copy is up-to-date..."
svn up
echo -e '\nCurrent branch is:'
echo $THIS_BRANCH
echo 'Guess trunk is at:'
echo $THE_TRUNK
echo

ELIGIBLES=$(svn mergeinfo --show-revs eligible $THE_TRUNK)

if [ "$ELIGIBLES" == '' ]; then
  echo -e "Relax, there's nothing to merge.\n"
  exit 0
fi

echo -e "Now listing eligible revs\n"

for rev in $ELIGIBLES; do
  CMD="svn log -$rev $THE_TRUNK $MAGIC"
  eval $CMD
done

echo
if [[ $1 == "-l" ]]; then exit 0; fi

echo "I can't help you unless you make a wish."
echo 'You have to say, "Genie, I want you to save my life," got it?'
echo "Okay!"
echo
echo "A. Merge everything"
echo "C. Merge a single commit"
echo "R. Merge a range of commits"
echo "Q. Let me think about it"

while true; do
  read -s -n1 key
  key=$(echo $key |tr a-z A-Z)
  case "$key" in
    A)
      mergeAll
      break
      ;;
    C)
      mergeOne
      break
      ;;
    R)
      mergeRange
      break
      ;;
    Q)
      echo -e "\nSee you later, then.\n"
      exit 0
      ;;
  esac
done

echo -e "\nThank you for choosing \"Magic Carpet\" for all your travel needs.\n"
exit 0

